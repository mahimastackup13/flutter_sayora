// import 'package:flutter/material.dart';
// import 'package:google_fonts/google_fonts.dart';
// import 'package:flutter_svg/flutter_svg.dart';
// import 'package:provider/provider.dart';
// import 'package:sayoraaa/services/supabase_auth_service.dart';

// import 'signup_screen.dart';
// import 'MainNavigationScreen.dart';
// import 'package:sayoraaa/provider/auth_provider.dart';


// class LoginScreen extends StatefulWidget {
//   const LoginScreen({super.key});

//   @override
//   State<LoginScreen> createState() => _LoginScreenState();
// }

// class _LoginScreenState extends State<LoginScreen> {
//   final TextEditingController _emailController = TextEditingController();
//   final TextEditingController _passwordController = TextEditingController();
//   final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

//   bool _isLoading = false;
//   String? _errorMessage;

//   Future<void> _handleLogin() async {
//     if (!_formKey.currentState!.validate()) return;

//     setState(() {
//       _isLoading = true;
//       _errorMessage = null;
//     });

//     final auth = Provider.of<AuthProvider>(context, listen: false);
//     final response = await auth.login(
//       _emailController.text.trim(),
//       _passwordController.text.trim(),
//     );

//     setState(() {
//       _isLoading = false;
//     });

//     if (response != null && auth.isLoggedIn) {
//       Navigator.pushReplacement(
//         context,
//         MaterialPageRoute(builder: (_) => const MainNavigationScreen()),
//       );
//     } else {
//       setState(() {
//         _errorMessage = "Invalid email or password.";
//       });
//     }
//   }

//   Future<void> _handleGoogleLogin() async {
//     setState(() {
//       _isLoading = true;
//       _errorMessage = null;
//     });

//     final auth = Provider.of<AuthProvider>(context, listen: false);
//     try {
//       await auth.signInWithGoogle();
//       if (auth.isLoggedIn) {
//         Navigator.pushReplacement(
//           context,
//           MaterialPageRoute(builder: (_) => const MainNavigationScreen()),
//         );
//       }
//     } catch (e) {
//       setState(() {
//         _errorMessage = "Google login failed: $e";
//       });
//     }

//     setState(() {
//       _isLoading = false;
//     });
//   }

//   Future<void> _handleFacebookLogin() async {
//     setState(() {
//       _isLoading = true;
//       _errorMessage = null;
//     });

//     final auth = Provider.of<AuthProvider>(context, listen: false);
//     try {
//       await auth.signInWithFacebook();
//       if (auth.isLoggedIn) {
//         Navigator.pushReplacement(
//           context,
//           MaterialPageRoute(builder: (_) => const MainNavigationScreen()),
//         );
//       }
//     } catch (e) {
//       setState(() {
//         _errorMessage = "Facebook login failed: $e";
//       });
//     }

//     setState(() {
//       _isLoading = false;
//     });
//   }

//   Future<void> _handleAppleLogin() async {
//     setState(() {
//       _isLoading = true;
//       _errorMessage = null;
//     });

//     final auth = Provider.of<AuthProvider>(context, listen: false);
//     try {
//       await auth.signInWithApple();
//       if (auth.isLoggedIn) {
//         Navigator.pushReplacement(
//           context,
//           MaterialPageRoute(builder: (_) => const MainNavigationScreen()),
//         );
//       }
//     } catch (e) {
//       setState(() {
//         _errorMessage = "Apple login failed: $e";
//       });
//     }

//     setState(() {
//       _isLoading = false;
//     });
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       backgroundColor: Colors.white,
//       body: SafeArea(
//         child: Stack(
//           children: [
//             Container(
//               decoration: const BoxDecoration(
//                 gradient: LinearGradient(
//                   colors: [
//                     Color.fromRGBO(34, 3, 136, 0.844),
//                     Color.fromRGBO(208, 195, 252, 1)
//                   ],
//                   begin: Alignment.topCenter,
//                   end: Alignment.bottomCenter,
//                 ),
//               ),
//             ),

//             Positioned(
//               top: 60,
//               left: 0,
//               right: 0,
//               child: Center(
//                 child: SvgPicture.asset(
//                   'assets/images/sayora.svg',
//                   width: 60,
//                   height: 60,
//                 ),
//               ),
//             ),

//             Positioned(
//               top: 180,
//               left: 0,
//               right: 0,
//               bottom: 0,
//               child: Container(
//                 margin: const EdgeInsets.only(top: 20),
//                 padding: const EdgeInsets.fromLTRB(30, 30, 30, 10),
//                 decoration: BoxDecoration(
//                   color: Colors.white,
//                   borderRadius: const BorderRadius.only(
//                     topLeft: Radius.circular(40),
//                     topRight: Radius.circular(40),
//                   ),
//                   boxShadow: const [
//                     BoxShadow(
//                       color: Color.fromRGBO(255, 255, 255, 0.12),
//                       offset: Offset(0, -30),
//                     ),
//                     BoxShadow(
//                       color: Color.fromRGBO(180, 170, 232, 0.826),
//                       offset: Offset(0, -20),
//                     ),
//                   ],
//                 ),
//                 child: Form(
//                   key: _formKey,
//                   child: SingleChildScrollView(
//                     child: Column(
//                       crossAxisAlignment: CrossAxisAlignment.stretch,
//                       children: [
//                         Text(
//                           "Welcome Back!",
//                           textAlign: TextAlign.center,
//                           style: GoogleFonts.poppins(
//                             fontSize: 22,
//                             fontWeight: FontWeight.w600,
//                           ),
//                         ),
//                         const SizedBox(height: 8),
//                         Text(
//                           "Log in to pick up where you left off.",
//                           textAlign: TextAlign.center,
//                           style: GoogleFonts.lato(
//                             fontSize: 14,
//                             color: Colors.black54,
//                           ),
//                         ),
//                         const SizedBox(height: 30),

//                         Align(
//                           alignment: Alignment.centerLeft,
//                           child: Text(
//                             "Enter Email Address",
//                             style: GoogleFonts.lato(
//                               fontSize: 14,
//                               color: Colors.black,
//                             ),
//                           ),
//                         ),
//                         const SizedBox(height: 8),
//                         TextFormField(
//                           controller: _emailController,
//                           keyboardType: TextInputType.emailAddress,
//                           validator: (value) {
//                             if (value == null || value.isEmpty) {
//                               return "Email is required";
//                             }
//                             if (!RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(value)) {
//                               return "Enter a valid email";
//                             }
//                             return null;
//                           },
//                           decoration: _inputDecoration("email@example.com"),
//                         ),
//                         const SizedBox(height: 20),

//                         Align(
//                           alignment: Alignment.centerLeft,
//                           child: Text(
//                             "Enter Password",
//                             style: GoogleFonts.lato(
//                               fontSize: 14,
//                               color: Colors.black,
//                             ),
//                           ),
//                         ),
//                         const SizedBox(height: 8),
//                         TextFormField(
//                           controller: _passwordController,
//                           obscureText: true,
//                           validator: (value) {
//                             if (value == null || value.isEmpty) {
//                               return "Password is required";
//                             }
//                             if (value.length < 6) {
//                               return "Password must be at least 6 characters";
//                             }
//                             return null;
//                           },
//                           decoration: _inputDecoration("Enter your password"),
//                         ),

//                         Align(
//                           alignment: Alignment.center,
//                           child: TextButton(
//                             onPressed: () {},
//                             child: Text(
//                               "Forgot your password?",
//                               style: GoogleFonts.lato(
//                                 fontSize: 13,
//                                 color: Colors.black87,
//                               ),
//                             ),
//                           ),
//                         ),
//                         const SizedBox(height: 14),

//                         if (_errorMessage != null)
//                           Padding(
//                             padding: const EdgeInsets.only(bottom: 10),
//                             child: Text(
//                               _errorMessage!,
//                               style: const TextStyle(color: Colors.red, fontSize: 13),
//                               textAlign: TextAlign.center,
//                             ),
//                           ),

//                         SizedBox(
//                           height: 50,
//                           child: ElevatedButton(
//                             onPressed: _isLoading ? null : _handleLogin,
//                             style: ElevatedButton.styleFrom(
//                               shape: RoundedRectangleBorder(
//                                 borderRadius: BorderRadius.circular(30),
//                               ),
//                               padding: EdgeInsets.zero,
//                               backgroundColor: const Color(0xFF734AD0),
//                             ),
//                             child: _isLoading
//                                 ? const CircularProgressIndicator(color: Colors.white)
//                                 : Ink(
//                                     decoration: const BoxDecoration(
//                                       gradient: LinearGradient(
//                                         colors: [
//                                           Color.fromARGB(255, 34, 3, 136),
//                                           Color.fromARGB(211, 208, 195, 252),
//                                         ],
//                                       ),
//                                       borderRadius: BorderRadius.all(Radius.circular(30)),
//                                     ),
//                                     child: Center(
//                                       child: Text(
//                                         "Get Started",
//                                         style: GoogleFonts.lato(
//                                           color: Colors.white,
//                                           fontWeight: FontWeight.w500,
//                                         ),
//                                       ),
//                                     ),
//                                   ),
//                           ),
//                         ),
//                         const SizedBox(height: 20),

//                         Row(
//                           children: [
//                             const Expanded(child: Divider()),
//                             Padding(
//                               padding: const EdgeInsets.symmetric(horizontal: 8),
//                               child: Text(
//                                 "Or Login with",
//                                 style: GoogleFonts.lato(fontSize: 12),
//                               ),
//                             ),
//                             const Expanded(child: Divider()),
//                           ],
//                         ),
//                         const SizedBox(height: 20),

//                         Row(
//                           mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                           children: [
//                             Expanded(
//                               child: Align(
//                                 alignment: Alignment.center,
//                                 child: _socialButton('assets/icons/fb.svg', _handleFacebookLogin),
//                               ),
//                             ),
//                             const SizedBox(width: 16),
//                             Expanded(
//                               child: Align(
//                                 alignment: Alignment.center,
//                                 child: _socialButton('assets/icons/google.svg', _handleGoogleLogin),
//                               ),
//                             ),
//                             const SizedBox(width: 16),
//                             Expanded(
//                               child: Align(
//                                 alignment: Alignment.center,
//                                 child: _socialButton('assets/icons/apple.svg', _handleAppleLogin),
//                               ),
//                             ),
//                           ],
//                         ),

//                         const SizedBox(height: 30),

//                         Row(
//                           mainAxisAlignment: MainAxisAlignment.center,
//                           children: [
//                             Text(
//                               "Don’t have an account? ",
//                               style: GoogleFonts.lato(fontSize: 13),
//                             ),
//                             GestureDetector(
//                               onTap: () {
//                                 Navigator.push(
//                                   context,
//                                   MaterialPageRoute(
//                                     builder: (context) => const SignUpScreen(),
//                                   ),
//                                 );
//                               },
//                               child: Text(
//                                 "Sign Up",
//                                 style: GoogleFonts.lato(
//                                   fontSize: 13,
//                                   fontWeight: FontWeight.bold,
//                                   color: const Color.fromRGBO(67, 125, 206, 1),
//                                 ),
//                               ),
//                             ),
//                           ],
//                         ),
//                       ],
//                     ),
//                   ),
//                 ),
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }

//   InputDecoration _inputDecoration(String hint) {
//     return InputDecoration(
//       hintText: hint,
//       hintStyle: const TextStyle(
//         fontSize: 12,
//         color: Color.fromRGBO(134, 133, 140, 1),
//       ),
//       filled: true,
//       fillColor: Colors.white,
//       contentPadding: const EdgeInsets.symmetric(horizontal: 14, vertical: 14),
//       enabledBorder: OutlineInputBorder(
//         borderRadius: BorderRadius.circular(10),
//         borderSide: const BorderSide(
//           color: Color.fromRGBO(180, 180, 180, 0.5),
//           width: 0.7,
//         ),
//       ),
//       focusedBorder: OutlineInputBorder(
//         borderRadius: BorderRadius.circular(10),
//         borderSide: const BorderSide(
//           color: Color.fromRGBO(120, 120, 120, 0.7),
//           width: 1.0,
//         ),
//       ),
//     );
//   }

//   Widget _socialButton(String iconPath, VoidCallback onTap) {
//     return InkWell(
//       onTap: onTap,
//       child: Container(
//         width: 90,
//         height: 45,
//         padding: const EdgeInsets.all(10),
//         decoration: BoxDecoration(
//           borderRadius: BorderRadius.circular(8),
//           border: Border.all(
//             color: const Color.fromARGB(116, 133, 139, 150),
//             width: 1.0,
//           ),
//         ),
//         child: SvgPicture.asset(iconPath, width: 20, height: 20),
//       ),
//     );
//   }
// }
// import 'package:flutter/material.dart';
// import 'package:supabase_flutter/supabase_flutter.dart';
// import 'package:provider/provider.dart';

// class AuthProvider extends ChangeNotifier {
//   final SupabaseClient _supabase = Supabase.instance.client;

//   User? _user;
//   User? get user => _user;

//   bool get isLoggedIn => _user != null;

//   AuthProvider() {
//     // Listen to auth state changes
//     _supabase.auth.onAuthStateChange.listen((data) {
//       final session = data.session;
//       _user = session?.user;
//       notifyListeners();
//     });

//     // Initialize current user if session exists
//     _user = _supabase.auth.currentUser;
//   }

//   /// ✅ Sign up with email, password, first & last name
//   Future<bool> signUpWithEmail(
//     String trim,
//     String trim,
//     String trim,
//     String trim, {
//     required String email,
//     required String password,
//     required String firstName,
//     required String lastName,
//   }) async {
//     try {
//       final response = await _supabase.auth.signUp(
//         email: email,
//         password: password,
//         data: {'first_name': firstName, 'last_name': lastName},
//       );
//       _user = response.user;
//       notifyListeners();
//       return response.user != null;
//     } catch (e) {
//       debugPrint("SignUp Error: $e");
//       return false;
//     }
//   }

//   /// Basic SignUp (if you don’t need names)
//   Future<AuthResponse?> signUp(String email, String password) async {
//     try {
//       final response = await _supabase.auth.signUp(
//         email: email,
//         password: password,
//       );
//       _user = response.user;
//       notifyListeners();
//       return response;
//     } catch (e) {
//       debugPrint("SignUp Error: $e");
//       return null;
//     }
//   }

//   /// Login with email & password
//   Future<AuthResponse?> login(String email, String password) async {
//     try {
//       final response = await _supabase.auth.signInWithPassword(
//         email: email,
//         password: password,
//       );
//       _user = response.user;
//       notifyListeners();
//       return response;
//     } catch (e) {
//       debugPrint("Login Error: $e");
//       return null;
//     }
//   }

//   /// Logout
//   Future<void> logout() async {
//     try {
//       await _supabase.auth.signOut();
//       _user = null;
//       notifyListeners();
//     } catch (e) {
//       debugPrint("Logout Error: $e");
//     }
//   }

//   /// Refresh session (useful in SplashScreen)
//   Future<void> checkAuthStatus() async {
//     final session = _supabase.auth.currentSession;
//     _user = session?.user;
//     notifyListeners();
//   }

//   /// --- SOCIAL LOGIN METHODS ---

//   /// Google Sign In
//   Future<void> signInWithGoogle() async {
//     try {
//       await _supabase.auth.signInWithOAuth(OAuthProvider.google);
//     } catch (e) {
//       debugPrint("Google SignIn Error: $e");
//       rethrow;
//     }
//   }

//   /// Facebook Sign In
//   Future<void> signInWithFacebook() async {
//     try {
//       await _supabase.auth.signInWithOAuth(OAuthProvider.facebook);
//     } catch (e) {
//       debugPrint("Facebook SignIn Error: $e");
//       rethrow;
//     }
//   }

//   /// Apple Sign In
//   Future<void> signInWithApple() async {
//     try {
//       await _supabase.auth.signInWithOAuth(OAuthProvider.apple);
//     } catch (e) {
//       debugPrint("Apple SignIn Error: $e");
//       rethrow;
//     }
//   }
// }


chat
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:emoji_picker_flutter/emoji_picker_flutter.dart';
import 'MainNavigationScreen.dart';

class ChatScreen extends StatefulWidget {
  const ChatScreen({super.key});

  @override
  State<ChatScreen> createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  final TextEditingController _controller = TextEditingController();
  final FocusNode _focusNode = FocusNode();
  bool _showEmojiPicker = false;

  void _onEmojiSelected(Emoji emoji) {
    _controller.text += emoji.emoji;
  }

  void _toggleEmojiPicker() {
    if (_showEmojiPicker) {
      setState(() => _showEmojiPicker = false);
      _focusNode.requestFocus();
    } else {
      setState(() => _showEmojiPicker = true);
      _focusNode.unfocus();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [
                Color.fromRGBO(70, 46, 151, 1),
                Color.fromRGBO(137, 121, 188, 0.824),
              ],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
          child: Column(
            children: [
              _buildHeader(context),
              Expanded(
                child: Stack(
                  children: [
                    Container(
                      decoration: const BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.vertical(
                          top: Radius.circular(40),
                        ),
                      ),
                      child: ListView(
                        padding: const EdgeInsets.fromLTRB(16, 16, 16, 120),
                        children: [
                          _messageBubble(
                            isMe: false,
                            message: "Hello!",
                            time: "10:00",
                            avatar: "👩‍🦰",
                          ),
                          _messageBubble(
                            isMe: true,
                            message: "Hi there! 😊",
                            time: "10:01",
                            avatar: "🧑🏾‍🦱",
                          ),
                        ],
                      ),
                    ),
                    Positioned(
                      bottom: _showEmojiPicker ? 270 : 40,
                      left: 0,
                      right: 0,
                      child: _buildInputField(),
                    ),

                    if (_showEmojiPicker)
                      Positioned(
                        bottom: 0,
                        left: 0,
                        right: 0,
                        child: Container(
                          height: 250,
                          decoration: const BoxDecoration(
                            color: Color(0xFF9E6BFC),
                            borderRadius: BorderRadius.only(
                              topLeft: Radius.circular(20),
                              topRight: Radius.circular(20),
                            ),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black26,
                                blurRadius: 8,
                                offset: Offset(0, -2),
                              ),
                            ],
                          ),
                          child: ClipRRect(
                            borderRadius: const BorderRadius.only(
                              topLeft: Radius.circular(20),
                              topRight: Radius.circular(20),
                            ),
                            child: EmojiPicker(
                              onEmojiSelected: (category, emoji) {
                                _onEmojiSelected(emoji);
                              },
                              config: Config(
                                emojiViewConfig: const EmojiViewConfig(
                                  emojiSizeMax: 28,
                                  columns: 8,
                                  backgroundColor: Color(0xFF9E6BFC),
                                ),
                                categoryViewConfig: const CategoryViewConfig(
                                  backgroundColor: Color(0xFF9E6BFC),
                                  iconColor: Colors.white70,
                                  iconColorSelected: Colors.white,
                                  indicatorColor: Colors.white,
                                ),
                                skinToneConfig: const SkinToneConfig(
                                  enabled: true,
                                  dialogBackgroundColor: Color(0xFFB99AF9),
                                ),
                                bottomActionBarConfig: BottomActionBarConfig(
                                  enabled: true,
                                  backgroundColor: const Color(0xFF8E65F3),
                                  buttonColor: Colors.white,
                                  buttonIconColor: Colors.deepPurple,
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHeader(BuildContext context) {
    return Container(
      height: 130,
      padding: const EdgeInsets.only(top: 50, left: 16, right: 16, bottom: 10),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          GestureDetector(
            onTap: () => Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (_) => const MainNavigationScreen(initialIndex: 0),
              ),
            ),
            child: const CircleAvatar(
              radius: 15,
              backgroundColor: Colors.white,
              child: Icon(
                Icons.arrow_back,
                size: 22,
                color: Color.fromRGBO(108, 65, 250, 1),
              ),
            ),
          ),
          const SizedBox(width: 10),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Sayora',
                style: GoogleFonts.lato(fontSize: 16, color: Colors.white),
              ),
              Row(
                children: [
                  const Icon(Icons.circle, color: Colors.green, size: 12),
                  const SizedBox(width: 6),
                  Text(
                    'Always active',
                    style: GoogleFonts.lato(color: Colors.white, fontSize: 14),
                  ),
                ],
              ),
            ],
          ),
          const Spacer(),

          Row(
            mainAxisAlignment: MainAxisAlignment.end,
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              const CircleAvatar(
                radius: 15,
                backgroundColor: Colors.white,
                child: Icon(
                  size: 22,
                  Icons.notifications_none,
                  color: Color.fromRGBO(108, 65, 250, 1),
                ),
              ),
            ],
          ),
          const SizedBox(width: 8),
          const Icon(size: 25, Icons.more_vert, color: Colors.white),
        ],
      ),
    );
  }

  Widget _messageBubble({
    required bool isMe,
    required String message,
    required String time,
    required String avatar,
  }) {
    final bubbleColor = isMe
        ? const Color.fromARGB(130, 127, 121, 149)
        : const Color.fromRGBO(162, 154, 234, 0.875);

    final avatarUrl = avatar == '👩‍🦰'
        ? 'https://tse4.mm.bing.net/th/id/OIP.lvuuyIeh1t0XEQcuipw9iwHaHa?pid=Api&P=0&h=180'
        : 'https://img.freepik.com/free-psd/3d-rendering-hair-style-avatar-design_23-2151869121.jpg?semt=ais_hybrid';

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: Row(
        mainAxisAlignment: isMe
            ? MainAxisAlignment.end
            : MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          if (!isMe) _buildAvatar(avatarUrl),
          if (!isMe) const SizedBox(width: 8),
          Flexible(
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 10),
              decoration: BoxDecoration(
                color: bubbleColor,
                borderRadius: isMe
                    ? const BorderRadius.only(
                        topLeft: Radius.circular(25),
                        topRight: Radius.circular(25),
                        bottomLeft: Radius.circular(25),
                      )
                    : const BorderRadius.only(
                        topLeft: Radius.circular(25),
                        topRight: Radius.circular(25),
                        bottomRight: Radius.circular(25),
                      ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    message,
                    style: GoogleFonts.lato(color: Colors.white, fontSize: 14),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    time,
                    style: GoogleFonts.lato(color: Colors.white70, fontSize: 8),
                  ),
                ],
              ),
            ),
          ),
          if (isMe) const SizedBox(width: 8),
          if (isMe) _buildAvatar(avatarUrl),
        ],
      ),
    );
  }

  Widget _buildAvatar(String url) {
    return Container(
      width: 36,
      height: 36,
      decoration: const BoxDecoration(
        shape: BoxShape.circle,
        color: Color.fromRGBO(150, 130, 203, 1),
      ),
      child: ClipOval(
        child: Image.network(
          url,
          fit: BoxFit.cover,
          errorBuilder: (_, __, ___) =>
              const Icon(Icons.person, color: Colors.white),
        ),
      ),
    );
  }

  Widget _buildInputField() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(30),
          boxShadow: [
            BoxShadow(
              color: Colors.black12.withOpacity(0.08),
              blurRadius: 15,
              offset: const Offset(0, 8),
            ),
          ],
        ),
        child: TextField(
          controller: _controller,
          focusNode: _focusNode,
          decoration: InputDecoration(
            hintText: "Type message here...",
            hintStyle: GoogleFonts.lato(color: Colors.grey[600], fontSize: 14),
            filled: true,
            fillColor: Colors.white,
            contentPadding: const EdgeInsets.symmetric(vertical: 14),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(30),
              borderSide: BorderSide.none,
            ),
            prefixIcon: GestureDetector(
              onTap: _toggleEmojiPicker,
              child: const Icon(
                Icons.emoji_emotions_outlined,
                color: Color.fromRGBO(175, 164, 212, 1),
              ),
            ),
            suffixIcon: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  margin: const EdgeInsets.only(right: 8),
                  decoration: const BoxDecoration(
                    shape: BoxShape.circle,
                    color: Color(0xFFEDE7F6),
                  ),
                  child: const Padding(
                    padding: EdgeInsets.all(10),
                    child: Icon(Icons.mic, color: Color(0xFF6B46C1), size: 20),
                  ),
                ),
                Container(
                  margin: const EdgeInsets.only(right: 8),
                  decoration: const BoxDecoration(
                    shape: BoxShape.circle,
                    gradient: LinearGradient(
                      colors: [Color(0xFF6B46C1), Color(0xFF9F7AEA)],
                    ),
                  ),
                  child: const Padding(
                    padding: EdgeInsets.all(10),
                    child: Icon(Icons.send, color: Colors.white, size: 20),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
